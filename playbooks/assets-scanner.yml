#------------------------------------------------------------------------------------------------------+
# Playbook locale per la generazione degli assets.                                                     |
# Va lanciato con:                                                                                     |
# ansible-playbook -i ../dc/hqit/inventory  -l hqit-morfeo-01 Alienvault/assets-scanner.yml            |
#------------------------------------------------------------------------------------------------------+
---
- hosts: all
  become: true
  vars_prompt:
  - name: net
    prompt: "Insert network to be scanned   (ex 10.60.0)"
    private: no

  - name: username
    prompt: "Insert username                (ex luca.bodini)"
    private: no

  - name: user_pass
    prompt: "insert password                (won't be prompted)"

  - name: itadm_password
    prompt: "Insert current itadm password  (won't be prompted)"

  - name: fallback_itadm_password
    prompt: "Insert old itadm password      (won't be prompted)"

  - name: root_password
    prompt: "Insert current root password   (won't be prompted)"

  - name: ping
    prompt: "Should I ICMP probe hosts before scanning? {Y|n}"
    private: no
    default: Y

  pre_tasks:
  - assert:
      that: net | length > 0
      msg: "Name must be a valid string"

  - assert:
      that: username | length > 0
      msg: "Default user must be a valid string"

  - assert:
      that: "'{{ ping }}' == 'Y' or '{{ ping }}' == 'n'"
      fail_msg: "ICMP probe must be True or False, maybe you mispelled..."
      success_msg: "Probe status receipt"


  tasks:
  #-------------------------------------------+
  # Environment setup                         |
  # Upload caches if available                |
  # Install required python libraryes         |
  # Install python                            |
  #-------------------------------------------+
  - name: "checking if a cache cleanup is needed."
    shell: "python3 ../../roles/assets-scanner/files/cache_rectifier.py \"{{ cache_purge_type }}\" \"{{net}}\""
    when: "cache_purge_type is defined and cache_purge_type == 'all' or cache_purge_type == 'undiscovered'"
    delegate_to: localhost
    become: false

  - name: Uploading caches to remote Machine
    synchronize:
      src: ../../roles/assets-scanner/files/cache.pkl
      dest: /dev/shm/
    ignore_errors: yes

  - name: Uploading OS caches to remote machine
    synchronize:
      src: ../../roles/assets-scanner/files/os_cache.pkl
      dest: /dev/shm/
    ignore_errors: yes

  - name: Uploading pip3 requirements
    synchronize:
      src: ../../roles/assets-scanner/files/requirements.txt
      dest: /dev/shm/

  - name: Calling build-python role ...
    import_role:
      name: ../../roles/build-python
    vars:
      python_version: 3.7.4

  - name: Installing pip3 requirements
    shell: pip3.7 install -r /dev/shm/requirements.txt

  #-------------------------------------------+
  # Encrypting vars                           |
  #-------------------------------------------+
  - name: Encrypting vars, plase check time if the second digit of time is close to 9 playbook may fail due to token expiration
    command:
      argv:
        - python3
        - -c
        - "from ansible_vault import Vault; import os;print(Vault(os.popen('date +%M | head -c 1 ; date +-%H-%d-%m-%y | md5sum | awk \"{print $1}\"').read().split(\" \")[0]).dump('{{username}}'))"
    register: crypted_username
    delegate_to: localhost
    become: false

  - name: Encrypting vars, plase check time if the second digit of time is close to 9 playbook may fail due to token expiration
    command:
      argv:
        - python3
        - -c
        - "from ansible_vault import Vault; import os;print(Vault(os.popen('date +%M | head -c 1 ; date +-%H-%d-%m-%y | md5sum | awk \"{print $1}\"').read().split(\" \")[0]).dump('{{user_pass}}'))"
    register: crypted_user_pass
    delegate_to: localhost
    become: false

  - name: Encrypting vars, plase check time if the second digit of time is close to 9 playbook may fail due to token expiration
    command:
      argv:
        - python3
        - -c
        - "from ansible_vault import Vault; import os;print(Vault(os.popen('date +%M | head -c 1 ; date +-%H-%d-%m-%y | md5sum | awk \"{print $1}\"').read().split(\" \")[0]).dump('{{itadm_password}}'))"
    register: crypted_itadm_password
    delegate_to: localhost
    become: false

  - name: Encrypting vars, plase check time if the second digit of time is close to 9 playbook may fail due to token expiration
    command:
      argv:
        - python3
        - -c
        - "from ansible_vault import Vault; import os;print(Vault(os.popen('date +%M | head -c 1 ; date +-%H-%d-%m-%y | md5sum | awk \"{print $1}\"').read().split(\" \")[0]).dump('{{fallback_itadm_password}}'))"
    register: crypted_fallback_itadm_password
    delegate_to: localhost
    become: false

  - name: Encrypting vars, plase check time if the second digit of time is close to 9 playbook may fail due to token expiration
    command:
      argv:
        - python3
        - -c
        - "from ansible_vault import Vault; import os;print(Vault(os.popen('date +%M | head -c 1 ; date +-%H-%d-%m-%y | md5sum | awk \"{print $1}\"').read().split(\" \")[0]).dump('{{root_password}}'))"
    register: crypted_root_password
    delegate_to: localhost
    become: false

  #File upload staggered due to code critical section.
  #Playbook may fail because in some cases token may expire in less than a minute
  - name: Templating script to remote Machine
    template:
      src: ../../roles/assets-scanner/templates/assets_generator.py
      dest: /dev/shm/
      owner: root
      group: root
      mode: 0700

  - name: "Scanning network in order to collect assets information, if script is building caches this may take a while."
    shell: 'python3.7 /dev/shm/assets_generator.py "{{net}}" /dev/shm {{ site_latitude }} {{ site_longitude }} {{ ping }}'

  - name: Downloading caches from remote machine...
    fetch:
      src: /dev/shm/cache.pkl
      dest: ../../roles/assets-scanner/files/cache.pkl
      flat: yes

  - name: Downloading OS caches from remote machine...
    fetch:
      src: /dev/shm/os_cache.pkl
      dest: ../../roles/assets-scanner/files/os_cache.pkl
      flat: yes

  - name: downloading assets csv to your Downloads folder
    fetch:
      src: /dev/shm/Assets.csv
      dest: ~/Downloads/Assets.csv
      flat: yes

  - name: Cleaning up before tmpfs
    file:
      state: absent
      path: "/dev/shm/{{item}}"
    with_items:
      - cache.pkl
      - os_cache.pkl
      - Assets.csv
      - assets_generator.py
      - requirements.txt
